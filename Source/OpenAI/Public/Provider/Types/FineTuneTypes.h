// OpenAI, Copyright LifeEXE. All Rights Reserved.

#pragma once

#include "CoreMinimal.h"
#include "Provider/Types/CommonTypes.h"
#include "Provider/OpenAIOptional.h"
#include "FineTuneTypes.generated.h"

///////////////////////////////////////////////////////
//                 REQUEST TYPES
///////////////////////////////////////////////////////

USTRUCT(BlueprintType)
struct FFineTuningJobHyperparamsRequest
{
    GENERATED_BODY()

    /**
      Number of examples in each batch.
      A larger batch size means that model parameters are updated less frequently,
      but with lower variance.
     */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Optional")
    FString Batch_Size{"auto"};

    /**
      Scaling factor for the learning rate.
      A smaller learning rate may be useful to avoid overfitting.
     */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Optional")
    FString Learning_Rate_Multiplier{"auto"};

    /**
      The number of epochs to train the model for.
      An epoch refers to one full cycle through the training dataset.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Optional")
    FString N_Epochs{"auto"};
};

USTRUCT(BlueprintType)
struct FWandb
{
    GENERATED_BODY()

    /**
      The name of the project that the new run will be created under.
     */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Required")
    FString Project;

    /**
      A display name to set for the run.
      If not set, we will use the Job ID as the name.
     */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Optional")
    FString Name;

    /**
      The entity to use for the run.
      This allows you to set the team or username of the WandB user
      that you would like associated with the run.
      If not set, the default entity for the registered WandB API key is used.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Optional")
    FString Entity;

    /**
      A list of tags to be attached to the newly created run.
      These tags are passed through directly to WandB.
      Some default tags are generated by OpenAI:
      "openai/finetune", "openai/{base-model}", "openai/{ftjob-abcdef}".
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Optional")
    TArray<FString> Tags;
};

USTRUCT(BlueprintType)
struct FIntegration
{
    GENERATED_BODY()

    /**
      The type of integration to enable. Currently, only "wandb" (Weights and Biases) is supported.
     */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Required")
    FString Type{"wandb"};

    /**
      The settings for your integration with Weights and Biases.
      This payload specifies the project that metrics will be sent to.
      Optionally, you can set an explicit display name for your run,
      add tags to your run, and set a default entity (team, username, etc)
      to be associated with your run.
     */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Required")
    FWandb Wandb;
};

USTRUCT(BlueprintType)
struct FFineTuningJob
{
    GENERATED_BODY()

    /**
      The name of the model to fine-tune. You can select one of the supported models:
      https://platform.openai.com/docs/guides/fine-tuning/what-models-can-be-fine-tuned
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Required")
    FString Model;

    /**
      The ID of an uploaded file that contains training data.
      See upload file for how to upload a file:
      https://platform.openai.com/docs/api-reference/files/upload
      Your dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose fine-tune.
      The contents of the file should differ depending on if the model uses the chat or completions format.
      See the fine-tuning guide for more details:
      https://platform.openai.com/docs/guides/fine-tuning
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Required")
    FString Training_File;

    /**
      The hyperparameters used for the fine-tuning job.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Optional")
    FFineTuningJobHyperparamsRequest Hyperparameters;

    /**
      A string of up to 64 characters that will be added to your fine-tuned model name.
      For example, a suffix of "custom-model-name" would produce a model name like
      ft:gpt-4o-mini:openai:custom-model-name:7p4lURel.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Optional")
    FOptionalString Suffix;

    /**
      The ID of an uploaded file that contains validation data.
      If you provide this file, the data is used to generate validation metrics periodically during fine-tuning.
      These metrics can be viewed in the fine-tuning results file. The same data should not be present in both train and validation files.
      Your dataset must be formatted as a JSONL file. You must upload your file with the purpose fine-tune.
      See the fine-tuning guide for more details:
      https://platform.openai.com/docs/guides/fine-tuning
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Optional")
    FOptionalString Validation_File;

    /**
      A list of integrations to enable for your fine-tuning job.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Optional")
    TArray<FIntegration> Integrations;

    /**
      The seed controls the reproducibility of the job.
      Passing in the same seed and job parameters should produce the same results,
      but may differ in rare cases.
      If a seed is not specified, one will be generated for you.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Optional")
    FOptionalInt Seed;
};

USTRUCT(BlueprintType)
struct FFineTuningQueryParameters
{
    GENERATED_BODY()

    /**
      Identifier for the last event from the previous pagination request.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Optional")
    FOptionalString After;

    /**
      Number of events to retrieve.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Optional")
    FOptionalInt Limit;

    FString ToQuery() const
    {
        FString Query{"?"};
        if (After.IsSet)
        {
            Query.Append("after=").Append(After.Value).Append("&");
        }

        if (Limit.IsSet)
        {
            Query.Append("limit=").Append(FString::FromInt(Limit.Value)).Append("&");
        }

        return Query.LeftChop(1);
    }
};

///////////////////////////////////////////////////////
//                 RESPONSE TYPES
///////////////////////////////////////////////////////

USTRUCT(BlueprintType)
struct FFineTuningJobError
{
    GENERATED_BODY()

    /**
      A machine-readable error code.
    */
    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    FString Code;

    /**
      A human-readable error message.
    */
    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    FString Message;

    /**
      The parameter that was invalid, usually training_file or validation_file.
      This field will be null if the failure was not parameter-specific.
    */
    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    FString Param;
};

USTRUCT(BlueprintType)
struct FFineTuningJobHyperparamsResponse
{
    GENERATED_BODY()

    /**
      The number of epochs to train the model for.
      An epoch refers to one full cycle through the training dataset.
      "auto" decides the optimal number of epochs based on the size of the dataset.
      If setting the number manually, we support any number between 1 and 50 epochs.
    */
    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    FString N_Epochs;
};

USTRUCT(BlueprintType)
struct FFineTuningJobObjectResponse
{
    GENERATED_BODY()

    /**
      The object identifier, which can be referenced in the API endpoints.
    */
    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    FString ID;

    /**
      The Unix timestamp (in seconds) for when the fine-tuning job was created.
    */
    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    int32 Created_At{};

    /**
      For fine-tuning jobs that have failed, this will contain more information on the cause of the failure.
    */
    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    FFineTuningJobError Error;

    /**
      The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running.
    */
    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    FString Fine_Tuned_Model;

    /**
      The Unix timestamp (in seconds) for when the fine-tuning job was finished.
      The value will be null if the fine-tuning job is still running.
    */
    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    int32 Finished_At{};

    /**
      The hyperparameters used for the fine-tuning job:
      https://platform.openai.com/docs/guides/fine-tuning
      See the fine-tuning guide for more details.
    */
    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    FFineTuningJobHyperparamsResponse Hyperparameters;

    /**
      The size of the file in bytes.
    */
    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    FString Model;

    /**
      The object type, which is always "fine_tuning.job".
    */
    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    FString Object;

    /**
      The organization that owns the fine-tuning job.
    */
    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    FString Organization_ID;

    /**
      The compiled results file ID(s) for the fine-tuning job.
      You can retrieve the results with the Files API:
      https://platform.openai.com/docs/api-reference/files/retrieve-contents
    */
    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    TArray<FString> Result_Files;

    /**
      The current status of the fine-tuning job,
      which can be either validating_files, queued, running, succeeded, failed, or cancelled.
    */
    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    FString Status;

    /**
      The total number of billable tokens processed by this fine-tuning job.
      The value will be null if the fine-tuning job is still running.
    */
    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    int32 Trained_Tokens{};

    /**
      The file ID used for training. You can retrieve the training data with the Files API:
      https://platform.openai.com/docs/api-reference/files/retrieve-contents
    */
    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    FString Training_File;

    /**
      The file ID used for validation. You can retrieve the validation results with the Files API:
      https://platform.openai.com/docs/api-reference/files/retrieve-contents
    */
    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    FString Validation_File;

    /**
      A list of integrations to enable for this fine-tuning job.
    */
    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    TArray<FIntegration> Integrations;

    /**
      The seed used for the fine-tuning job.
    */
    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    int32 Seed{};

    /**
      The Unix timestamp (in seconds) for when the fine-tuning job is estimated to finish.
      The value will be null if the fine-tuning job is not running.
    */
    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    int32 Estimated_Finish{};
};

USTRUCT(BlueprintType)
struct FFineTuningJobEventResponse
{
    GENERATED_BODY()

    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    FString ID;

    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    int32 Created_At{};

    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    FString Level;

    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    FString Message;

    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    FString Object;
};

USTRUCT(BlueprintType)
struct FMetrics
{
    GENERATED_BODY()

    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    int32 Step{};

    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    double Train_Loss{};

    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    double Train_Mean_Token_Accuracy{};

    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    double Valid_Loss{};

    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    double Valid_Mean_Token_Accuracy{};

    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    double Full_Valid_Loss{};

    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    double Full_Valid_Mean_Token_Accuracy{};
};

USTRUCT(BlueprintType)
struct FFineTuningJobCheckpointResponse
{
    GENERATED_BODY()

    /**
      The checkpoint identifier, which can be referenced in the API endpoints.
    */
    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    FString ID;

    /**
      The Unix timestamp (in seconds) for when the checkpoint was created.
    */
    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    int32 Created_At{};

    /**
      The name of the fine-tuned checkpoint model that is created.
    */
    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    FString Fine_Tuned_Model_Checkpoint;

    /**
      The step number that the checkpoint was created at.
    */
    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    int32 Step_Number{};

    /**
      Metrics at the step number during the fine-tuning job.
    */
    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    FMetrics Metrics;

    /**
      The name of the fine-tuning job that this checkpoint was created from.
    */
    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    FString Fine_Tuning_Job_Id;

    /**
      The object type, which is always "fine_tuning.job.checkpoint".
    */
    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    FString Object;
};

//===================
USTRUCT(BlueprintType)
struct FListFineTuningJobsResponse
{
    GENERATED_BODY()

    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    FString Object;

    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    TArray<FFineTuningJobObjectResponse> Data;

    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    bool Has_More{false};
};

USTRUCT(BlueprintType)
struct FListFineTuningEventsResponse
{
    GENERATED_BODY()

    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    FString Object;

    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    TArray<FFineTuningJobEventResponse> Data;

    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    bool Has_More{false};
};

USTRUCT(BlueprintType)
struct FListFineTuningCheckpointsResponse
{
    GENERATED_BODY()

    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    FString Object;

    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    TArray<FFineTuningJobCheckpointResponse> Data;

    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    FString First_Id;

    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    FString Last_id;

    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    bool Has_More{false};
};
