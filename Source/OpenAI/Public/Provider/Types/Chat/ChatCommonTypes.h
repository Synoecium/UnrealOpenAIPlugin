// OpenAI, Copyright LifeEXE. All Rights Reserved.

#pragma once

#include "CoreMinimal.h"
#include "Provider/Types/CommonTypes.h"
#include "Provider/Types/ToolsTypes.h"
#include "Provider/OpenAIOptional.h"
#include "ChatCommonTypes.generated.h"

UENUM(BlueprintType)
enum class EMessageContentType : uint8
{
    Text,
    Image_URL
};

UENUM(BlueprintType)
enum class EChatResponseFormat : uint8
{
    Text = 0,
    JSON_Object
};

UENUM(BlueprintType)
enum class EServiceTier : uint8
{
    Auto = 0,
    Default
};

USTRUCT(BlueprintType)
struct FImageURL
{
    GENERATED_BODY()
    /**
      Either a URL of the image or the base64 encoded image data.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Required")
    FString URL;

    /**
      Specifies the detail level of the image.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Required")
    FString Detail{"auto"};
};

USTRUCT(BlueprintType)
struct FMessageContent
{
    GENERATED_BODY()

    /**
      The text content.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Required")
    FString Text;

    /**
      The image content.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Required")
    FImageURL Image_URL;

    /**
      The type of the content part.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Required")
    FString Type{"text"};
};

USTRUCT(BlueprintType)
struct FMessage
{
    GENERATED_BODY()

    // ========================== content ===============================

    /**
      The contents of the message.
      content is required for all messages, and may be null for assistant messages with function calls.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Required")
    FString Content;

    /**
      An array of content parts with a defined type,
      each can be of type text or image_url when passing in images.
      You can pass multiple images by adding multiple image_url content parts.
      Image input is only supported when using the gpt-4o model.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Required")
    TArray<FMessageContent> ContentArray;

    // ========================== common ===============================

    /**
      The role of the messages author. One of system, user, assistant, or tool.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Required")
    FString Role;

    /**
      An optional name for the participant.
      Provides the model information to differentiate between participants of the same role.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Optional")
    FOptionalString Name;

    // ========================== tools ===============================

    /**
      The tool calls generated by the model, such as function calls.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Optional")
    TArray<FToolCalls> Tool_Calls;

    /**
      Tool call that this message is responding to.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Optional")
    FOptionalString Tool_Call_ID;
};

///////////////////////////////////////////////////////
//                 REQUEST TYPES
///////////////////////////////////////////////////////

USTRUCT(BlueprintType)
struct FChatCompletionResponseFormat
{
    GENERATED_BODY()

    /**
      Must be one of text, json_object or json_schema
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Required")
    FString Type{"text"};
};

USTRUCT(BlueprintType)
struct FStreamOptions
{
    GENERATED_BODY()

    /**
      If set, an additional chunk will be streamed before the data: [DONE] message.
      The usage field on this chunk shows the token usage statistics for the entire request,
      and the choices field will always be an empty array.
      All other chunks will also include a usage field, but with a null value.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Optional")
    FOptionalBool Include_Usage;
};

USTRUCT(BlueprintType)
struct FChatCompletion
{
    GENERATED_BODY()

    /**
      A list of messages comprising the conversation so far.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Required")
    TArray<FMessage> Messages;  //@todo: check

    /**
      ID of the model to use.
      See the model endpoint compatibility table for details on which models work with the Chat API.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Required")
    FString Model;

    /**
      Number between -2.0 and 2.0.
      Positive values penalize new tokens based on their existing frequency in the text so far,
      decreasing the model's likelihood to repeat the same line verbatim.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Optional")
    float Frequency_Penalty{0.0f};

    /**
      Modify the likelihood of specified tokens appearing in the completion.
      Accepts a json object that maps tokens (specified by their token ID in the tokenizer)
      to an associated bias value from -100 to 100. Mathematically, the bias is added to
      the logits generated by the model prior to sampling.
      The exact effect will vary per model, but values between -1 and 1 should decrease
      or increase likelihood of selection; values like -100 or 100 should result in a ban
      or exclusive selection of the relevant token.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Optional")
    TMap<FString, int32> Logit_Bias;

    /**
      Whether to return log probabilities of the output tokens or not.
      If true, returns the log probabilities of each output token returned in the content of message.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Optional")
    bool Logprobs{false};

    /**
      An integer between 0 and 20 specifying the number of most likely tokens
      to return at each token position, each with an associated log probability.
      logprobs must be set to true if this parameter is used.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Optional")
    FOptionalInt Top_Logprobs;

    /**
      An upper bound for the number of tokens that can be generated for a completion,
      including visible output tokens and reasoning tokens.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Optional")
    FOptionalInt Max_Completion_Tokens;

    /**
      How many chat completion choices to generate for each input message.
      Note that you will be charged based on the number of generated tokens across all of the choices.
      Keep n as 1 to minimize costs.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Optional")
    int32 N{1};

    /**
      Number between -2.0 and 2.0.
      Positive values penalize new tokens based on whether they appear in the text so far,
      increasing the model's likelihood to talk about new topics.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Optional")
    float Presence_Penalty{0.0f};

    /**
      An object specifying the format that the model must output.
      Setting to { "type": "json_object" } enables JSON mode,
      which guarantees the message the model generates is valid JSON.

      Important: when using JSON mode, you must also instruct the model to produce JSON yourself
      via a system or user message. Without this, the model may generate an unending stream of whitespace
      until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request.
      Also note that the message content may be partially cut off if finish_reason="length",
      which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Optional")
    FChatCompletionResponseFormat Response_Format;  //@todo: upgrade

    /**
      This feature is in Beta. If specified, our system will make a best effort to sample deterministically,
      such that repeated requests with the same seed and parameters should return the same result.
      Determinism is not guaranteed, and you should refer to the system_fingerprint responseparameter
      to monitor changes in the backend.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Optional")
    FOptionalInt Seed;

    /**
      Specifies the latency tier to use for processing the request.
      This parameter is relevant for customers subscribed to the scale tier service:

      If set to 'auto', and the Project is Scale tier enabled, the system will utilize scale tier
      credits until they are exhausted.

      If set to 'auto', and the Project is not Scale tier enabled,
      the request will be processed using the default service tier with a
      lower uptime SLA and no latency guarentee.

      If set to 'default', the request will be processed using the default service tier
      with a lower uptime SLA and no latency guarentee.

      When not set, the default behavior is 'auto'.
      When this parameter is set, the response body will include the service_tier utilized.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Optional")
    FOptionalString Service_Tier;

    /**
      Up to 4 sequences where the API will stop generating further tokens.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Optional")
    TArray<FString> Stop;

    /**
      If set, partial message deltas will be sent, like in ChatGPT.
      Tokens will be sent as data-only server-sent events as they become available,
      with the stream terminated by a data: [DONE] message.
      See the OpenAI Cookbook for example code
      [https://github.com/openai/openai-cookbook/blob/main/examples/How_to_stream_completions.ipynb]
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Optional")
    bool Stream{false};

    /**
      Options for streaming response. Only set this when you set stream: true.
     */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Optional")
    FStreamOptions Stream_Options;

    /**
      What sampling temperature to use, between 0 and 2.
      Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
      We generally recommend altering this or top_p but not both.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Optional")
    float Temperature{1.0f};

    /**
      An alternative to sampling with temperature, called nucleus sampling,
      where the model considers the results of the tokens with top_p probability mass.
      So 0.1 means only the tokens comprising the top 10% probability mass are considered.
      We generally recommend altering this or temperature but not both.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Optional")
    float Top_P{1.0f};

    /**
      A list of tools the model may call.
      Currently, only functions are supported as a tool.
      Use this to provide a list of functions the model may generate JSON inputs for.
      A max of 128 functions are supported.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Optional")
    TArray<FTools> Tools;

    /**
      Controls which (if any) tool is called by the model.
      "none" means the model will not call any tool and instead generates a message.
      "auto" means the model can pick between generating a message or calling one or more tools.
      "required" means the model must call one or more tools.
      Specifying a particular tool via {"type": "function", "function": {"name": "my_function"}}
      forces the model to call that tool.

      none is the default when no functions are present. auto is the default if functions are present.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Optional")
    FToolChoice Tool_Choice;  // @todo: none option

    /**
      Whether to enable parallel function calling during tool use.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Optional")
    FOptionalBool Parallel_Tool_Calls;

    /**
      A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Optional")
    FOptionalString User;
};

///////////////////////////////////////////////////////
//                 RESPONSE TYPES
///////////////////////////////////////////////////////

USTRUCT(BlueprintType)
struct FUsage
{
    GENERATED_BODY()

    /**
      Number of tokens in the generated completion.
    */
    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    int32 Completion_Tokens{};

    /**
      Number of tokens in the prompt.
    */
    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    int32 Prompt_Tokens{};

    /**
      Total number of tokens used in the request (prompt + completion).
    */
    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    int32 Total_Tokens{};
};

/**
  Log probability information for the choice.
*/
USTRUCT(BlueprintType)
struct FLogProb
{
    GENERATED_BODY()

    /**
      The token.
    */
    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    FString Token;

    /**
      The log probability of this token,
      if it is within the top 20 most likely tokens.
      Otherwise, the value -9999.0 is used to signify that the token is very unlikely.
    */
    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    int32 Logprob{};

    /**
      A list of integers representing the UTF-8 bytes
      representation of the token. Useful in instances where characters
      are represented by multiple tokens and their byte representations
      must be combined to generate the correct text representation.
      Can be null if there is no bytes representation for the token.
    */
    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    TArray<uint8> Bytes;
};

USTRUCT(BlueprintType)
struct FLogProbExtent : public FLogProb
{
    GENERATED_BODY()

    /**
      List of the most likely tokens and their log probability, at this token position.
      In rare cases, there may be fewer than the number of requested top_logprobs returned.
     */
    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    TArray<FLogProb> Top_Logprobs;
};

USTRUCT(BlueprintType)
struct FLogProbs
{
    GENERATED_BODY()

    /**
      A list of message content tokens with log probability information.
    */
    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    TArray<FLogProbExtent> Content;

    /**
      A list of message refusal tokens with log probability information.
    */
    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    TArray<FLogProbExtent> Refusal;
};

USTRUCT(BlueprintType)
struct FChatCompletionResponseBase
{
    GENERATED_BODY()

    /**
       A unique identifier for the chat completion.
    */
    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    FString ID;

    /**
       The Unix timestamp (in seconds) of when the chat completion was created.
    */
    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    int32 Created{};

    /**
       The model used for the chat completion.
    */
    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    FString Model;

    /**
      The service tier used for processing the request.
      This field is only included if the service_tier parameter is specified in the request.
    */
    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    FString Service_Tier;

    /**
      This fingerprint represents the backend configuration that the model runs with.
      Can be used in conjunction with the seed request parameter to understand when
      backend changes have been made that might impact determinism.
    */
    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    FString System_Fingerprint;

    /**
       The object type, which is always chat.completion.
    */
    UPROPERTY(BlueprintReadOnly, Category = "OpenAI")
    FString Object;
};
