// OpenAI, Copyright LifeEXE. All Rights Reserved.

#pragma once

#include "CoreMinimal.h"
#include "ToolsTypes.h"
#include "CommonTypes.generated.h"

USTRUCT(BlueprintType)
struct FMessage
{
    GENERATED_BODY()

    /**
      The role of the messages author. One of system, user, assistant, or tool.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Required")
    FString Role;

    /**
      The contents of the message.
      content is required for all messages, and may be null for assistant messages with function calls.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Required")
    FString Content;

    /**
      The tool calls generated by the model, such as function calls.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI")
    TArray<FToolCalls> Tool_Calls;

    /**
      Tool call that this message is responding to.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Required")
    FString Tool_Call_ID;

    /**
      An optional name for the participant.
      Provides the model information to differentiate between participants of the same role.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Optional")
    FString Name;
};

USTRUCT(BlueprintType)
struct FOpenAIAuth
{
    GENERATED_BODY()

    UPROPERTY(BlueprintReadWrite, Category = "OpenAI")
    FString APIKey{};

    UPROPERTY(BlueprintReadWrite, Category = "OpenAI")
    FString OrganizationID{};

    bool IsEmpty() const { return APIKey.IsEmpty() || OrganizationID.IsEmpty(); }
};

namespace OpenAI
{
using ServiceSecrets = TArray<TTuple<FString, FString>>;
using QueryPairs = TArray<TTuple<FString, FString>>;

}  // namespace OpenAI
